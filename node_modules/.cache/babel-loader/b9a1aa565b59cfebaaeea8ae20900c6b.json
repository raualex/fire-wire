{"ast":null,"code":"import _classCallCheck from \"/Users/alexanderrau/Desktop/FunProjects/fire-wire/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexanderrau/Desktop/FunProjects/fire-wire/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Node from \"../lib/node.js\";\n\nvar Trie =\n/*#__PURE__*/\nfunction () {\n  function Trie() {\n    _classCallCheck(this, Trie);\n\n    this.wordCount = 0;\n    this.children = {};\n    this.currentNode = this;\n    this.suggestWords = [];\n  }\n\n  _createClass(Trie, [{\n    key: \"count\",\n    value: function count() {\n      return this.wordCount;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(string) {\n      var firstLetter = string.charAt(0).toLowerCase();\n\n      if (string.length === 1 && this.currentNode.children[firstLetter] === undefined) {\n        this.currentNode.children[firstLetter] = new Node(true);\n        this.wordCount++;\n        this.currentNode = this;\n      } else if (string.length > 1 && this.currentNode.children[firstLetter] === undefined) {\n        this.currentNode.children[firstLetter] = new Node(false);\n        this.currentNode = this.currentNode.children[firstLetter];\n        this.insert(string.slice(1));\n      } else if (string.length === 1 && this.currentNode.children[firstLetter].endsWord === false) {\n        this.currentNode.children[firstLetter].endsWord = true;\n        this.wordCount++;\n        this.currentNode = this;\n      } else if (string.length === 1) {\n        this.currentNode = this;\n      } else {\n        this.currentNode = this.currentNode.children[firstLetter];\n        this.insert(string.slice(1));\n      }\n    }\n  }, {\n    key: \"populate\",\n    value: function populate(array) {\n      var _this = this;\n\n      array.forEach(function (word) {\n        _this.insert(word);\n      });\n    }\n  }, {\n    key: \"suggest\",\n    value: function suggest(string) {\n      this.suggestWords = [];\n\n      for (var i = 0; i < string.length; i++) {\n        if (this.currentNode.children[string.charAt(i).toLowerCase()]) {\n          this.currentNode = this.currentNode.children[string.charAt(i).toLowerCase()];\n        } else {\n          return this.suggestWords;\n        }\n      }\n\n      function recursiveThingy(bufferString, node, suggestionArray) {\n        if (node.endsWord) {\n          suggestionArray.push(bufferString);\n        }\n\n        Object.keys(node.children).forEach(function (child) {\n          recursiveThingy(bufferString + child, node.children[child], suggestionArray);\n        });\n      }\n\n      recursiveThingy(string, this.currentNode, this.suggestWords);\n      this.currentNode = this;\n      return this.suggestWords;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(string) {\n      for (var i = 0; i < string.length; i++) {\n        this.currentNode = this.currentNode.children[string.charAt(i).toLowerCase()];\n      }\n\n      if (this.currentNode.endsWord === true) {\n        this.currentNode.endsWord = false;\n        this.wordCount--;\n      }\n\n      this.currentNode = this;\n    }\n  }]);\n\n  return Trie;\n}();\n\nmodule.exports = Trie;","map":null,"metadata":{},"sourceType":"module"}